---
# Install MongoDB
- name: Import MongoDB public GPG key
  apt_key:
    url: https://www.mongodb.org/static/pgp/server-{{ mongodb_version }}.asc
    state: present

- name: Add MongoDB repository
  apt_repository:
    repo: "deb [ arch=amd64 ] {{ mongodb_repo_url }}"
    state: present

- name: Update package list
  apt:
    update_cache: yes

- name: Install MongoDB
  apt:
    name: mongodb-org
    state: present

- name: Start and enable MongoDB service
  systemd:
    name: mongod
    state: started
    enabled: yes

# Configure MongoDB for security and application use
- name: Ensure pymongo is installed
  pip:
    name: pymongo
    state: present

- name: Create MongoDB configuration directory
  file:
    path: "/etc/mongodb"
    state: directory
    mode: '0755'

- name: Configure MongoDB to listen on all interfaces
  lineinfile:
    path: /etc/mongod.conf
    regexp: '  bindIp:'
    line: '  bindIp: 0.0.0.0'
    state: present
  notify: restart mongodb

- name: Enable MongoDB authentication
  blockinfile:
    path: /etc/mongod.conf
    block: |
      security:
        authorization: enabled
    insertafter: '^#security:'
    state: present
  notify: restart mongodb

- name: Ensure MongoDB data and log directories exist
  file:
    path: "{{ item.path }}"
    state: directory
    owner: mongodb
    group: mongodb
    mode: "{{ item.mode }}"
  loop:
    - { path: /var/lib/mongodb, mode: '0755' }
    - { path: /var/log/mongodb, mode: '0750' }

# Create application database and insert starter data
- name: Create initialization script
  copy:
    dest: /tmp/init_mongodb.js
    content: |
      db = db.getSiblingDB('{{ mongodb_db }}');
      
      var users = db.getUsers();
      var userExists = false;
      for (var i = 0; i < users.length; i++) {
        if (users[i].user === '{{ mongodb_user }}') {
          userExists = true;
          break;
        }
      }
      
      if (!userExists) {
        db.createUser({
          user: '{{ mongodb_user }}',
          pwd: '{{ mongodb_password }}',
          roles: [{ role: 'readWrite', db: '{{ mongodb_db }}' }]
        });
        print("User created successfully");
      } else {
        print("User already exists");
      }
      
      var count = db.deployment_info.count();
      if (count === 0) {
        db.deployment_info.insertOne({
          status: "active",
          message: "Secure DevOps app deployed with verified artifact!",
          timestamp: new Date()
        });
        print("Inserted starter record");
      } else {
        print("Starter records already exist");
      }
    mode: '0600'

- name: Run MongoDB initialization script
  command: mongo /tmp/init_mongodb.js
  register: mongo_init
  changed_when: "'User created successfully' in mongo_init.stdout or 'Inserted starter record' in mongo_init.stdout"

- name: Remove initialization script
  file:
    path: /tmp/init_mongodb.js
    state: absent
  ignore_errors: yes

# Set environment variables for Flask application
- name: Create environment file directory
  file:
    path: "/opt/flask-app/env"
    state: directory
    mode: '0755'

- name: Create MongoDB environment file
  template:
    src: templates/mongodb.env.j2
    dest: "/opt/flask-app/env/mongodb.env"
    mode: '0640'